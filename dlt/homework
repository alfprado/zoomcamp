Question 1: What is the sum of the outputs of the generator for limit = 5?
A: 10.23433234744176
B: 7.892332347441762
C: 8.382332347441762
D: 9.123332347441762

import dlt
import duckdb

generators_pipeline = dlt.pipeline(destination='duckdb', dataset_name='generators')

conn = duckdb.connect(f"{generators_pipeline.pipeline_name}.duckdb")

def square_root_generator(limit):
    n = 1
    while n <= limit:
        yield n ** 0.5
        n += 1

# Example usage:
limit = 5
generator = square_root_generator(limit)

for sqrt_value in generator:
    print(sqrt_value)


table = generators_pipeline.run(square_root_generator(limit), table_name="square_root", write_disposition="replace")


conn.sql(f"SET search_path = 'generators'")

values = conn.sql("SELECT sum(value) FROM square_root").df()

display(values)

* 8.382332347441762

Question 2: What is the 13th number yielded by the generator?

A: 4.236551275463989
B: 3.605551275463989
C: 2.345551275463989
D: 5.678551275463989

def square_root_generator(limit):
    n = 1
    while n <= limit:
        yield n ** 0.5
        n += 1

# Example usage:
limit = 13
generator = square_root_generator(limit)
result = 0
for sqrt_value in generator:
    print(sqrt_value)

* 3.605551275463989

Question 3: Append the 2 generators. After correctly appending the data, calculate the sum of all ages of people.
A: 353
B: 365
C: 378
D: 390

import dlt
import duckdb

generators_pipeline = dlt.pipeline(destination='duckdb', dataset_name='generators')
conn = duckdb.connect(f"{generators_pipeline.pipeline_name}.duckdb")
def people_1():
    for i in range(1, 6):
        yield {"ID": i, "Name": f"Person_{i}", "Age": 25 + i, "City": "City_A"}


def people_2():
    for i in range(3, 9):
        yield {"ID": i, "Name": f"Person_{i}", "Age": 30 + i, "City": "City_B", "Occupation": f"Job_{i}"}

table = generators_pipeline.run(people_1(), table_name="customers", write_disposition="replace")

table = generators_pipeline.run(people_2(),	table_name="customers", write_disposition="append")

conn.sql(f"SET search_path = 'generators'")

ages = conn.sql("SELECT sum(age) FROM customers").df()

display(ages)

* 353

Question 4: Merge the 2 generators using the ID column. Calculate the sum of ages of all the people loaded as described above.
A: 215
B: 266
C: 241
D: 258

mport dlt
import duckdb

generators_pipeline = dlt.pipeline(destination='duckdb', dataset_name='generators')

conn = duckdb.connect(f"{generators_pipeline.pipeline_name}.duckdb")

def people_1():
    for i in range(1, 6):
        yield {"ID": i, "Name": f"Person_{i}", "Age": 25 + i, "City": "City_A"}


def people_2():
    for i in range(3, 9):
        yield {"ID": i, "Name": f"Person_{i}", "Age": 30 + i, "City": "City_B", "Occupation": f"Job_{i}"}

table = generators_pipeline.run(people_1(), table_name="customers", write_disposition="replace", primary_key="ID")

table = generators_pipeline.run(people_2(),	table_name="customers", write_disposition="merge", primary_key="ID")

conn.sql(f"SET search_path = 'generators'")

ages = conn.sql("SELECT sum(age) FROM customers").df()

display(ages)

*266
